<div class="mt-8">
  <h2 class="text-xl font-semibold text-heading-1 mb-4">Oblicz koszt dostawy</h2>
  
  <div class="flex flex-col gap-4">
    <div>
      <label for="postalCode" class="block text-sm font-medium text-heading-3 mb-1">
        Twój kod pocztowy
      </label>
      <input 
        type="text" 
        id="postalCode"
        class="w-full max-w-xs px-4 py-2 border border-gray-200 rounded-lg focus:outline-none focus:border-primary"
        placeholder="np. 00-000"
        pattern="[0-9]{2}-[0-9]{3}"
      />
    </div>

    <button
      id="calculateDistance"
      class="w-fit px-6 py-2 bg-primary text-white rounded-lg hover:bg-primary/90 transition-colors"
    >
      Oblicz odległość
    </button>

    <div id="transit-result" class="text-heading-3"></div>
  </div>
</div>

<script>
  const calculateButton = document.getElementById('calculateDistance');
  const postalCodeInput = document.getElementById('postalCode') as HTMLInputElement;
  const resultDiv = document.getElementById('transit-result');

  const destinationPostalCode = '14-107';

  async function getCoordinates(postalCode: string) {
    try {
      const response = await fetch(`https://nominatim.openstreetmap.org/search?postalcode=${postalCode}&country=poland&format=json`);
      const data = await response.json();
      
      if (data && data[0]) {
        return {
          lat: parseFloat(data[0].lat),
          lon: parseFloat(data[0].lon)
        };
      }
      throw new Error('Nie znaleziono lokalizacji');
    } catch (error) {
      throw new Error('Błąd podczas pobierania współrzędnych');
    }
  }

  async function getRouteDistance(fromLat: number, fromLon: number, toLat: number, toLon: number) {
    try {
      const response = await fetch(
        `https://router.project-osrm.org/route/v1/driving/${fromLon},${fromLat};${toLon},${toLat}?overview=false`
      );
      const data = await response.json();
      
      if (data.routes && data.routes[0]) {
        // Convert distance from meters to kilometers and round
        return Math.round(data.routes[0].distance / 1000);
      }
      throw new Error('Nie można wyznaczyć trasy');
    } catch (error) {
      throw new Error('Błąd podczas obliczania trasy');
    }
  }

  calculateButton?.addEventListener('click', async () => {
    if (!postalCodeInput || !resultDiv) return;
    
    const userPostalCode = postalCodeInput.value;
    
    if (!/^\d{2}-\d{3}$/.test(userPostalCode)) {
      resultDiv.textContent = 'Wprowadź poprawny kod pocztowy (format: XX-XXX)';
      return;
    }

    try {
      resultDiv.textContent = 'Obliczanie...';
      
      const [userCoords, destinationCoords] = await Promise.all([
        getCoordinates(userPostalCode),
        getCoordinates(destinationPostalCode)
      ]);

      const distance = await getRouteDistance(
        userCoords.lat,
        userCoords.lon,
        destinationCoords.lat,
        destinationCoords.lon
      );

      resultDiv.textContent = `Odległość: ${distance} km`;
      // Calculate delivery cost - 50 PLN per each started 100km
      const deliveryCost = Math.ceil(distance / 100) * 50;
      resultDiv.textContent = `Odległość: ${distance} km, Koszt dostawy: ${deliveryCost} zł`;
    } catch (error) {
      resultDiv.textContent = 'Wystąpił błąd podczas obliczania odległości';
    }
  });
</script>
